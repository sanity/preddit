<root>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.util.Map&lt;java.lang.String,V&gt; lowercaseKeys(java.util.Map&lt;java.lang.String,V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; not(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.String join(java.util.Map&lt;?,?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String truncateAtMaxLength(java.lang.String, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.util.Iterator&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional java.lang.Iterable&lt;T&gt; presentInstances(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.Optional&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter java.util.List&lt;java.lang.String&gt; splitToList(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Function&lt;java.lang.String,T&gt; valueOfFunction(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence boolean doEquivalent(T, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(com.google.appengine.repackaged.com.google.common.base.CharMatcher)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range V max()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter com.google.appengine.repackaged.com.google.common.base.Converter&lt;T,T&gt; identity()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner skipNulls()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch createStarted()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Preconditions T checkNotNull(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeHTML(java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String padEnd(java.lang.String, int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Map&lt;?,?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence boolean doEquivalent(T, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter com.google.appengine.repackaged.com.google.common.base.Converter&lt;A,C&gt; compose(com.google.appengine.repackaged.com.google.common.base.Converter&lt;B,C&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher or(com.google.appengine.repackaged.com.google.common.base.CharMatcher)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Iterable&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stripPrefixIgnoreCase(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Function T apply(F) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Preconditions T checkNotNull(T, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; or(com.google.appengine.repackaged.com.google.common.base.Optional&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.util.Map&lt;java.lang.String,V&gt; lowercaseKeys(java.util.Map&lt;java.lang.String,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner useForNull(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher inRange(char, char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags java.lang.String[] parse(java.lang.String[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CaseFormat java.lang.String to(com.google.appengine.repackaged.com.google.common.base.CaseFormat, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String retainFrom(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums java.lang.reflect.Field getField(java.lang.Enum&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Map&lt;?,?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;E,E&gt; identity()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stripPrefixIgnoreCase(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher boolean matchesAnyOf(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch long elapsed(java.util.concurrent.TimeUnit) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flag.Enum Enum(E, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.GoogleException GoogleException(java.lang.Throwable, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher int indexIn(java.lang.CharSequence, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Iterable&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch reset()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Holder com.google.appengine.repackaged.com.google.common.base.Holder&lt;T&gt; of(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.GoogleException GoogleException(java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher noneOf(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher isNot(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CaseFormat java.lang.String to(com.google.appengine.repackaged.com.google.common.base.CaseFormat, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String[] splitAndTrim(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.util.Iterator&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; of(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; and(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter com.google.appengine.repackaged.com.google.common.base.Converter&lt;B,A&gt; reverse()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeCString(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.util.Map&lt;?,?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.FinalizableWeakReference FinalizableWeakReference(T, com.google.appengine.repackaged.com.google.common.base.FinalizableReferenceQueue) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper toStringHelper(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher precomputed()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; enclose(V)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; compose(com.google.appengine.repackaged.com.google.common.base.Function&lt;? super F,T&gt;, com.google.appengine.repackaged.com.google.common.base.Supplier&lt;F&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; equalTo(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher noneOf(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(double)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher int indexIn(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil byte[] hexToBytes(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.Class&lt;?&gt;&gt; assignableFrom(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; or(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String collapseFrom(java.lang.CharSequence, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Equivalence&lt;F&gt; onResultOf(com.google.appengine.repackaged.com.google.common.base.Function&lt;F,? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil byte[] hexToBytes(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; getIfPresent(java.lang.Class&lt;T&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; emptyRange()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; memoizeWithExpiration(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.AtomicTracerStatMap java.util.Map&lt;java.lang.String,java.lang.Long&gt; getMap()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Defaults T defaultValue(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; absent()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;K,V&gt; forMap(java.util.Map&lt;K,? extends V&gt;, V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags Flags(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeHTML(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects T nonNull(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil int[] splitInts(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String repeat(java.lang.String, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper toStringHelper(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper toStringHelper(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Throwables java.lang.Throwable getRootCause(java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String truncateStringForUtf8Storage(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;java.lang.Object,E&gt; constant(E)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects T nonNull(T, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.Class&lt;?&gt;&gt; assignableFrom(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; fromNullable(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unicodePreservingSubstring(java.lang.String, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Converter&lt;java.lang.String,T&gt; stringConverter(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner useForNull(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharsetCache java.nio.charset.Charset forName(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; getIfPresent(java.lang.Class&lt;T&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String[] parseDelimitedList(java.lang.String, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher negate()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;K,V&gt; forMap(java.util.Map&lt;K,? extends V&gt;, V)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;A,C&gt; compose(com.google.appengine.repackaged.com.google.common.base.Function&lt;B,C&gt;, com.google.appengine.repackaged.com.google.common.base.Function&lt;A,? extends B&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch createStarted(com.google.appengine.repackaged.com.google.common.base.Ticker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.util.Iterator&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ascii java.lang.String toLowerCase(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; or(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Receivers com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt; collect(java.util.Collection&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;A,C&gt; compose(com.google.appengine.repackaged.com.google.common.base.Function&lt;B,C&gt;, com.google.appengine.repackaged.com.google.common.base.Function&lt;A,? extends B&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter java.lang.Iterable&lt;java.lang.String&gt; split(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher boolean matchesAllOf(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unicodePreservingSubstring(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Holder T or(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner useForNull(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; second(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super Y&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.GoogleRuntimeException GoogleRuntimeException(com.google.appengine.repackaged.com.google.common.base.GoogleException) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String replaceSmartQuotes(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher forPredicate(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super java.lang.Character&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ascii java.lang.String toUpperCase(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Function&lt;java.lang.String,T&gt; valueOfFunction(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Pair com.google.appengine.repackaged.com.google.common.base.Function&lt;com.google.appengine.repackaged.com.google.common.base.Pair&lt;A,B&gt;,B&gt; secondFunction()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner useForNull(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; and(com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stripPrefix(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.util.Map&lt;?,?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter trimResults(com.google.appengine.repackaged.com.google.common.base.CharMatcher) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String javaScriptEscape(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String fixedWidth(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String javaScriptEscapeToAscii(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch createUnstarted(com.google.appengine.repackaged.com.google.common.base.Ticker)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher boolean matchesNoneOf(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional T or(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.String join(java.util.Iterator&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Map&lt;?,?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Preconditions T checkNotNull(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.GoogleRuntimeException GoogleRuntimeException(java.lang.String, java.lang.Throwable) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags void register(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ticker com.google.appengine.repackaged.com.google.common.base.Ticker systemTicker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Tracer com.google.appengine.repackaged.com.google.common.base.Tracer.Stat getStatsForType(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher int lastIndexIn(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher forPredicate(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super java.lang.Character&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil boolean endsWithIgnoreCase(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Randoms java.security.SecureRandom secureRandom()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper toStringHelper(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Pair com.google.appengine.repackaged.com.google.common.base.Function&lt;com.google.appengine.repackaged.com.google.common.base.Pair&lt;A,B&gt;,A&gt; firstFunction()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String retainFrom(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Receivers com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt; ignore()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence int doHash(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Equivalence&lt;java.lang.Object&gt; equals()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.String join(java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; or(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;java.lang.Object,T&gt; forSupplier(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; synchronizedSupplier(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter fixedLength(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Pair java.util.Comparator&lt;com.google.appengine.repackaged.com.google.common.base.Pair&lt;A,B&gt;&gt; compareByFirst()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; or(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;, com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter.MapSplitter withKeyValueSeparator(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(java.util.regex.Pattern)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String nullToEmpty(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; intersection(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;java.lang.Double&gt; encloseDoubles(double...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Equivalence&lt;java.lang.Iterable&lt;S&gt;&gt; pairwise()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String trimFrom(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch stop()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Throwables java.lang.String getStackTraceAsString(java.lang.Throwable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.util.Iterator&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range boolean intersects(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; not(com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; memoize(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; enclose(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;, com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String removeFrom(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;java.lang.Long&gt; encloseLongs(long...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil boolean endsWithIgnoreCase(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String trimAndCollapseFrom(java.lang.CharSequence, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; in(java.util.Collection&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; or(com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;, com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter.MapSplitter withKeyValueSeparator(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Equivalence.Wrapper&lt;S&gt; wrap(S)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; ofInstance(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.Object&gt; instanceOf(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil int displayWidth(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; notNull()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Holder com.google.appengine.repackaged.com.google.common.base.Holder&lt;T&gt; of(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter.MapSplitter withKeyValueSeparator(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter limit(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; not(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; rangeOf(V...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; compose(com.google.appengine.repackaged.com.google.common.base.Function&lt;? super F,T&gt;, com.google.appengine.repackaged.com.google.common.base.Supplier&lt;F&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Holder void set(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;T,java.lang.Boolean&gt; forPredicate(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CaseFormat com.google.appengine.repackaged.com.google.common.base.Converter&lt;java.lang.String,java.lang.String&gt; converterTo(com.google.appengine.repackaged.com.google.common.base.CaseFormat)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Tracer int addTracingStatistic(com.google.appengine.repackaged.com.google.common.base.TracingStatistic) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String capitalize(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; alwaysFalse()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range V min()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional java.lang.Iterable&lt;T&gt; presentInstances(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.Optional&lt;? extends T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; isNull()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeMySQLString(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags void registerIncludeDerived(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; compose(com.google.appengine.repackaged.com.google.common.base.Function&lt;? super F,T&gt;, com.google.appengine.repackaged.com.google.common.base.Supplier&lt;F&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; or(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;, com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;A&gt; compose(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;B&gt;, com.google.appengine.repackaged.com.google.common.base.Function&lt;A,? extends B&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter A doBackward(B) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Equivalence&lt;java.lang.Object&gt; identity()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter B apply(A) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter trimResults()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner on(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ascii java.lang.String toLowerCase(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil void escapeStringBody(java.lang.CharSequence, boolean, com.google.appengine.repackaged.com.google.common.base.StringUtil.JsEscapingMode, java.lang.Appendable) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String replaceFrom(java.lang.CharSequence, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String trimFrom(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String indent(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; memoize(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;java.lang.Integer&gt; encloseInts(int...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; memoizeWithExpiration(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;, long, java.util.concurrent.TimeUnit) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;java.lang.Integer&gt; encloseInts(int...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;K,V&gt; forMap(java.util.Map&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; intersection(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; or(com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Receivers com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt; compose(com.google.appengine.repackaged.com.google.common.base.Receiver&lt;? super T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter.MapSplitter withKeyValueSeparator(com.google.appengine.repackaged.com.google.common.base.Splitter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeHTML(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String[] split(java.lang.String, java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Holder com.google.appengine.repackaged.com.google.common.base.Holder&lt;T&gt; unset()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch createStarted(com.google.appengine.repackaged.com.google.common.base.Ticker)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String[] split(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.CharSequence&gt; contains(java.util.regex.Pattern) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String[] split(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;K,V&gt; forMap(java.util.Map&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Equivalence&lt;F&gt; onResultOf(com.google.appengine.repackaged.com.google.common.base.Function&lt;F,? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; synchronizedSupplier(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; intersect(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;, com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter java.lang.Iterable&lt;B&gt; convertAll(java.lang.Iterable&lt;? extends A&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher boolean apply(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher and(com.google.appengine.repackaged.com.google.common.base.CharMatcher)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;V&gt; transform(com.google.appengine.repackaged.com.google.common.base.Function&lt;? super T,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Function&lt;com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;,T&gt; supplierFunction()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, double)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Tracer void removeTracingListener(com.google.appengine.repackaged.com.google.common.base.TracingListener) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stream2String(java.io.InputStream, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeHTML(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Suppliers com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt; memoizeWithExpiration(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;, long, java.util.concurrent.TimeUnit) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil int bytesStorage(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;V&gt; transform(com.google.appengine.repackaged.com.google.common.base.Function&lt;? super T,V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher int countIn(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch createUnstarted(com.google.appengine.repackaged.com.google.common.base.Ticker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;java.lang.Object,T&gt; forSupplier(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter java.lang.Iterable&lt;B&gt; convertAll(java.lang.Iterable&lt;? extends A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; first(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super X&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; and(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String lastToken(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Throwables void propagateIfPossible(java.lang.Throwable, java.lang.Class&lt;X1&gt;, java.lang.Class&lt;X2&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; of(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Receivers com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt; compose(java.lang.Iterable&lt;com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter.MapSplitter withKeyValueSeparator(com.google.appengine.repackaged.com.google.common.base.Splitter)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String trimTrailingFrom(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner withKeyValueSeparator(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; or(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;, com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicate boolean apply(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; and(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter B doForward(A) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, long)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String lastToken(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags void register(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String trimLeadingFrom(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flag.Enum void setValueFromString(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Receivers com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt; compose(java.lang.Iterable&lt;com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; and(com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;, com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(com.google.appengine.repackaged.com.google.common.base.CharMatcher) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String replaceFrom(java.lang.CharSequence, char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; and(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;, com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;java.lang.Double&gt; encloseDoubles(double...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.String join(java.lang.Object, java.lang.Object, java.lang.Object...) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.CharSequence&gt; contains(java.util.regex.Pattern)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; and(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;, com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String convertEOLToLF(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper omitNullValues()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Tracer com.google.appengine.repackaged.com.google.common.base.Tracer.Stat getStatsForType(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Randoms java.security.SecureRandom secureRandom(byte[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch long elapsedTime(java.util.concurrent.TimeUnit) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; first(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super X&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter onPattern(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch start()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; alwaysTrue()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; and(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;, com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Pair com.google.appengine.repackaged.com.google.common.base.Pair&lt;A,B&gt; of(A, B)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; in(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CaseFormat com.google.appengine.repackaged.com.google.common.base.Converter&lt;java.lang.String,java.lang.String&gt; converterTo(com.google.appengine.repackaged.com.google.common.base.CaseFormat) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.FinalizablePhantomReference FinalizablePhantomReference(T, com.google.appengine.repackaged.com.google.common.base.FinalizableReferenceQueue) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;java.lang.Long&gt; encloseLongs(long...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter java.lang.Iterable&lt;java.lang.String&gt; split(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;T,java.lang.Boolean&gt; forPredicate(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher boolean apply(java.lang.Character) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; enclose(V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch Stopwatch(com.google.appengine.repackaged.com.google.common.base.Ticker) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Receivers com.google.appengine.repackaged.com.google.common.base.Receiver&lt;T&gt; collect(java.util.Collection&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner java.lang.String join(java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; newRange(V, V) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher is(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String replaceSmartQuotes(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stripSuffixIgnoreCase(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher and(com.google.appengine.repackaged.com.google.common.base.CharMatcher) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(float)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range boolean contains(V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil long[] splitLongs(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Tracer com.google.appengine.repackaged.com.google.common.base.Tracer shortName(java.lang.Object, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper toStringHelper(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher anyOf(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects T nonNull(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter.MapSplitter java.util.Map&lt;java.lang.String,java.lang.String&gt; split(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner on(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.String join(java.lang.Iterable&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Converter com.google.appengine.repackaged.com.google.common.base.Converter&lt;A,C&gt; compose(com.google.appengine.repackaged.com.google.common.base.Converter&lt;B,C&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Equivalence com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; equivalentTo(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.lang.Iterable&lt;? extends java.util.Map.Entry&lt;?,?&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; enclosure(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stripSuffixIgnoreCase(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; or(java.lang.Iterable&lt;? extends com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; second(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super Y&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper toStringHelper(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional T or(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.CharSequence&gt; containsPattern(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner on(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Holder com.google.appengine.repackaged.com.google.common.base.Holder&lt;T&gt; absent()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String repeat(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; or(com.google.appengine.repackaged.com.google.common.base.Optional&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;T&gt; and(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;? super T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects T firstNonNull(T, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Pair java.util.Comparator&lt;com.google.appengine.repackaged.com.google.common.base.Pair&lt;A,B&gt;&gt; compareBySecond()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; rangeOf(V...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags void registerMethod(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.FinalizableSoftReference FinalizableSoftReference(T, com.google.appengine.repackaged.com.google.common.base.FinalizableReferenceQueue) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Strings java.lang.String padStart(java.lang.String, int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Preconditions T checkNotNull(T, java.lang.String, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;java.lang.Object&gt; instanceOf(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper add(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Optional&lt;T&gt; getIfPresent(java.lang.Class&lt;T&gt;, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter trimResults(com.google.appengine.repackaged.com.google.common.base.CharMatcher)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ranges com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; newRange(V, V)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil boolean isCjk(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;java.lang.Object,java.lang.String&gt; toStringFunction()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher java.lang.String removeFrom(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.CharMatcher com.google.appengine.repackaged.com.google.common.base.CharMatcher or(com.google.appengine.repackaged.com.google.common.base.CharMatcher) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner A appendTo(A, java.util.Map&lt;?,?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String javaScriptUnescape(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Throwables java.lang.Throwable getRootCause(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional T or(T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Randoms java.util.Random insecureRandom()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Randoms java.util.Random insecureRandom(long)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil void escapeStringBody(java.lang.CharSequence, boolean, com.google.appengine.repackaged.com.google.common.base.StringUtil.JsEscapingMode, java.lang.Appendable) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Tracer void addTracingListener(com.google.appengine.repackaged.com.google.common.base.TracingListener) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Preconditions T checkNotNull(T, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String stripSuffix(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Optional T or(com.google.appengine.repackaged.com.google.common.base.Supplier&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper com.google.appengine.repackaged.com.google.common.base.Objects.ToStringHelper addValue(long)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;A&gt; compose(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;B&gt;, com.google.appengine.repackaged.com.google.common.base.Function&lt;A,? extends B&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil boolean startsWithIgnoreCase(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Range com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt; enclosure(com.google.appengine.repackaged.com.google.common.base.Range&lt;V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.BinaryPredicates com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;X,Y&gt; not(com.google.appengine.repackaged.com.google.common.base.BinaryPredicate&lt;? super X,? super Y&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String unescapeMySQLString(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Enums com.google.appengine.repackaged.com.google.common.base.Converter&lt;java.lang.String,T&gt; stringConverter(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Stopwatch com.google.appengine.repackaged.com.google.common.base.Stopwatch createUnstarted()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Predicates com.google.appengine.repackaged.com.google.common.base.Predicate&lt;A&gt; compose(com.google.appengine.repackaged.com.google.common.base.Predicate&lt;B&gt;, com.google.appengine.repackaged.com.google.common.base.Function&lt;A,? extends B&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil java.lang.String truncateIfNecessary(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Flags java.lang.String[] parse(java.lang.String[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil boolean startsWithIgnoreCase(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter omitEmptyStrings()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Objects T nonNull(T, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Splitter com.google.appengine.repackaged.com.google.common.base.Splitter on(java.util.regex.Pattern) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner com.google.appengine.repackaged.com.google.common.base.Joiner.MapJoiner withKeyValueSeparator(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Functions com.google.appengine.repackaged.com.google.common.base.Function&lt;A,C&gt; compose(com.google.appengine.repackaged.com.google.common.base.Function&lt;B,C&gt;, com.google.appengine.repackaged.com.google.common.base.Function&lt;A,? extends B&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.StringUtil void escapeStringBody(java.lang.CharSequence, boolean, com.google.appengine.repackaged.com.google.common.base.StringUtil.JsEscapingMode, java.lang.Appendable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Preconditions T checkNotNull(T, java.lang.String, java.lang.Object...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Ascii java.lang.String toUpperCase(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.appengine.repackaged.com.google.common.base.Joiner A appendTo(A, java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
